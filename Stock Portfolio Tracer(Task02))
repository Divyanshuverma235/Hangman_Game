import requests

class Portfolio:
    def __init__(self, api_key):
        self.stocks = {}
        self.api_key = api_key
        self.base_url = "https://www.alphavantage.co/query"

    def add_stock(self, ticker, shares):
        if ticker in self.stocks:
            self.stocks[ticker]['shares'] += shares
        else:
            self.stocks[ticker] = {'shares': shares}
        print(f"Added {shares} shares of {ticker} to the portfolio.")

    def remove_stock(self, ticker, shares):
        if ticker in self.stocks:
            if shares >= self.stocks[ticker]['shares']:
                del self.stocks[ticker]
                print(f"Removed all shares of {ticker} from the portfolio.")
            else:
                self.stocks[ticker]['shares'] -= shares
                print(f"Removed {shares} shares of {ticker} from the portfolio.")
        else:
            print(f"{ticker} not found in the portfolio.")

    def get_stock_price(self, ticker):
        params = {
            'function': 'TIME_SERIES_INTRADAY',
            'symbol': ticker,
            'interval': '1min',
            'apikey': self.api_key
        }
        try:
            response = requests.get(self.base_url, params=params)
            data = response.json()
            if 'Time Series (1min)' in data:
                latest_time = list(data['Time Series (1min)'].keys())[0]
                price = data['Time Series (1min)'][latest_time]['1. open']
                return float(price)
            else:
                print(f"Error fetching data for {ticker}: {data.get('Error Message', 'Unknown error')}")
                return None
        except Exception as e:
            print(f"Error fetching data for {ticker}: {e}")
            return None

    def track_performance(self):
        if not self.stocks:
            print("No stocks in the portfolio.")
            return

        total_value = 0
        print(f"{'Ticker':<10} {'Shares':<10} {'Price':<10} {'Value':<10}")
        print("-" * 40)
        for ticker, info in self.stocks.items():
            price = self.get_stock_price(ticker)
            if price is not None:
                value = price * info['shares']
                total_value += value
                print(f"{ticker:<10} {info['shares']:<10} {price:<10.2f} {value:<10.2f}")
            else:
                print(f"{ticker:<10} {info['shares']:<10} {'N/A':<10} {'N/A':<10}")

        print("-" * 40)
        print(f"Total Portfolio Value: {total_value:.2f}")

# Example usage:
# api_key = 'your_alpha_vantage_api_key'
# portfolio = Portfolio(api_key)
# portfolio.add_stock('AAPL', 10)
# portfolio.add_stock('GOOGL', 5)
# portfolio.track_performance()
